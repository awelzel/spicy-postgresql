# Set up protocol confirmation/rejection for analyzers, as well as any further
# Zeek-specific analysis.

module Zeek_PostgreSQL;

import PostgreSQL;
import zeek;

# If we see a client StartupMessage, that's pretty good.
on PostgreSQL::StartupMessage::%done {
    zeek::confirm_protocol();
}

# If the server replied with an ssl_byte and we let it through,
# that's also pretty good.
on PostgreSQL::MaybeBackendSSL::ssl_byte {
    zeek::confirm_protocol();
}

on PostgreSQL::SSLSink::%init {
  zeek::protocol_begin("SSL");
}

on PostgreSQL::SSLSink::chunk {
  # print "ssl_chunk", zeek::is_orig(), self;
  zeek::protocol_data_in(zeek::is_orig(), self.chunk);
}

on PostgreSQL::FrontendMessage::%error {
    zeek::reject_protocol("error while parsing PostgreSQL");
}

on PostgreSQL::BackendMessage::%error {
    zeek::reject_protocol("error while parsing PostgreSQL");
}

public function convert_parameters_to_map(parameters: vector<PostgreSQL::Parameter>) : map<bytes, bytes> {
    local t: map<bytes, bytes>;
    for ( p in parameters )
        t[p.name] = p.value;

    return t;
}

# For IdentifiedField
public function convert_parameters_to_map(parameters: vector<PostgreSQL::IdentifiedField>) : map<bytes, bytes> {
    local t: map<bytes, bytes>;
    for ( p in parameters )
        t[p.code] = p.value;

    return t;
}

# For ParameterStatus
public function convert_parameter_status_to_map(name: bytes, value: bytes) : map<bytes, bytes> {
    local t: map<bytes, bytes>;
    t[name] = value;
    return t;
}


# For DescriptionField
public function convert_fields_to_map(fields: vector<PostgreSQL::DescriptionField>) : map<bytes, uint32> {
    local t: map<bytes, uint32>;
    for ( f in fields )
        t[f.name] = f.typ_oid;

    return t;
}

# For Backend key data
public function convert_key_data_to_map(pid: uint32, key: uint32) : map<uint32, uint32> {
    local t: map<uint32, uint32>;
    t[pid] = key;
    return t;
}



