# A PostgreSQL analyzer.
#
# https://www.postgresql.org/docs/current/protocol.html
#
# Protocol version 3.0

module PostgreSQL;

type SSLFrontendState = enum {
    Requested,
    NotRequested,
};

type SSLBackendState = enum {
    S,
    N,
};

# When a connection switches to SSL, this consumes all the SSL chunks.
# In zeek_postgres.spicy, SSLSink%init calls zeek::protocol_begin() and
# then zeek::protocol_data_in()
#
# There's a single SSLSink shared between backend and frontend.
type SSLSink = unit {
    chunk: bytes &chunked &eod;
};

# Used as context for synchronization between frontend/backend.
type Context = struct {
    ssl_frontend_state: SSLFrontendState;
    ssl_backend_state: SSLBackendState;
    ssl_sink: sink&;
    ssl_sink_connected: bool;
};

type ProtocolVersion = unit {
    major: uint16;
    minor: uint16;
};

type StartupParameter = unit {
    name: /[-_\/A-Za-z0-9]+/ &requires=(|$$| > 0);
    : uint8 &requires=($$ == 0);
    value: /[\x20-\x7e]+/ &requires=(|$$| > 0);
    : uint8 &requires=($$ == 0);
};

type StartupMessage = unit {
    length: uint32 &requires=(self.length >= 9);
    version: ProtocolVersion &requires=($$.major == 3);
    parameters: StartupParameter[] &size=self.length - 9;
    : b"\x00";
};

type SSLRequest = unit {
    length: uint32;
    request_code: uint32 {

        if (self.length != 8 || self.request_code != 0x04d2162f)
            self.backtrack();

        self.ssl_requested = True;
    }

    # For usage from whether or not &try succeeded.
    var ssl_requested: bool;
};

# Top-level entry for the client.
public type FrontendMessages = unit {
    %context = Context;
    on %init {
        # If this isn't done, the ssl_sink is a Null reference. Also,
        # we only want to use a single sink for both, frontend and
        # backend (only call protocol_begin() once).
        self.context().ssl_sink = self.s1;
        self.context().ssl_sink_connected = False;
    }

    var buffered: vector<bytes>;
    var s1_connected: bool;
    sink s1;

    # Try parsing a client SSL request. This is optional, so we do
    # it with &try and then set the context with the result so we
    # can behave accordingly when parsing BackendMessages.
    #
    # TODO: Replace with switch rather than &try / backtrack().
    #       Need to figure out how/when to set the ssl_frontend_state
    #       if parsing wasn't successful.
    ssl_request: SSLRequest &try {
        if (self.ssl_request.ssl_requested) {
            self.context().ssl_frontend_state = SSLFrontendState::Requested;
        } else {
            self.context().ssl_frontend_state = SSLFrontendState::NotRequested;
            self.context().ssl_backend_state = SSLBackendState::N;
        }

        # print "frontend ssl", self.context().ssl_frontend_state;
    }

    # If the client requested SSL, we do not know how to continue parsing
    # until the server confirmed SSL. As long as it hasn't responded,
    # the context() will not be valid yet, so we buffer bytes here until the
    # context is set.
    #
    # If the client has not requested SSL, we set ssl_backend_state above
    # already and directly connect the PlainFrontendMessages.
    : bytes &chunked &eod {
        if (!self.context().ssl_backend_state) {
            self.buffered.push_back($$);
        } else {
            # print "frontend ssl_state backend set!", self.context();
            if (!self.s1_connected) {
                if (self.context().ssl_backend_state == SSLBackendState::S) {
                    if (!self.context().ssl_sink_connected) {
                        self.context().ssl_sink.connect(new SSLSink());
                        self.context().ssl_sink_connected = True;
                    }
                } else {
                    # print "connecting plain frontend messages";
                    self.s1.connect(new PlainFrontendMessages());
                }

                self.s1_connected = True;

                if (|self.buffered| > 0) {
                    for (b in self.buffered)
                        self.s1.write(b);
                }

                self.buffered.resize(0);
            }

            self.s1.write($$);
        }
    }
};

type PlainFrontendMessages = unit {
    startup_message: StartupMessage;
    : FrontendMessage[];
};

type FrontendMessage = unit {
    typ: uint8;
    length: uint32 &requires=(self.length >= 4);

    switch (self.typ) {
        'p' -> : AuthenticationResponse(self.length - 4) &size=self.length - 4;
        'X' -> : Terminate(self.length - 4) &size=self.length - 4;
        'Q' -> simple_query: SimpleQuery(self.length - 4) &size=self.length - 4;
        * -> not_implemented: NotImplemented(self.typ, self.length - 4) &size=self.length - 4;
    };
};

type AuthenticationResponse = unit(length: uint32) {
    # This is PasswordMessage, SASLInitialMessage, etc. based on context.
    # For now, just thread it through.
    data: bytes &eod;
};

type Terminate = unit(length: uint32) {};

type SimpleQuery = unit(length: uint32) {
    query: bytes &until=b"\x00" &size=length;
};

# The client has requested SSL, the server either confirms (S) or
# stays in plaintext (N) mode. Depending on the result, we connect
# our sink to the SSL sink, or to a PlainBackendMessages unit.
#
type MaybeBackendSSL = unit(ctx: Context&) {

    # Connected SSL, or plaintext.
    sink s1;

    ssl_byte: uint8 &requires=($$ == 'S' || $$ == 'N') {
        # print "backend ssl_byte", $$;
        if ($$ == 'S') {
            ctx.ssl_backend_state = SSLBackendState::S;
            if (!ctx.ssl_sink_connected) {
                ctx.ssl_sink.connect(new SSLSink());
                ctx.ssl_sink_connected = True;
            }

            # Share the SSL sink with the frontend.
            self.s1 = ctx.ssl_sink;
        } else {
            ctx.ssl_backend_state = SSLBackendState::N;
            self.s1.connect(new PlainBackendMessages());
        }
    }

    # Now that s1 is connected, forward the rest of the connection to it.
    : bytes &chunked &eod -> self.s1;
};

# Top-level entry for the server.
public type BackendMessages = unit {
    %context = Context;

    var buffered: vector<bytes>;
    var s1_connected: bool;
    sink s1;

    # Buffer until the SSL frontend state was populated.
    : bytes &chunked &eod {
        if (!self.context().ssl_frontend_state) {
            # print "backend buffering ", |$$|;
            self.buffered.push_back($$);
        } else {
            # The ssl_frontend_state has been set. If The client requested SSL,
            # connect to an SSLMaybe instance. If it did not, connect
            # directly to PlainBackendMessages.
            # print "backend", self.context(), |self.buffered|, self.s1, self.s1_connected;
            if (!self.s1_connected) {

                if (self.context().ssl_frontend_state == SSLFrontendState::Requested) {
                    self.s1.connect(new MaybeBackendSSL(self.context()));
                } else {
                    self.s1.connect(new PlainBackendMessages());
                }

                self.s1_connected = True;

                if (|self.buffered| > 0) {
                    for (b in self.buffered)
                        self.s1.write(b);
                }
                self.buffered.resize(0);
            }

            # print "backend writing to sink", $$, |self.s1|;
            self.s1.write($$);
        }
    }
};

type PlainBackendMessages = unit {
    : BackendMessage[];
};

type BackendMessage = unit {
    typ: uint8 &size=1;
    length: uint32 &requires=(self.length >= 4);

    switch (self.typ) {
        'K' -> backend_key_data: BackendKeyData(self.length - 4);
        'E' -> error: ErrorResponse(self.length - 4);
        'R' -> auth: AuthenticationRequest(self.length - 4);
        'S' -> parameter_status: ParameterStatus(self.length - 4);
        'D' -> data_row: DataRow(self.length - 4);
        'Z' -> ready_for_query: ReadyForQuery(self.length - 4);
        * -> not_implemented: NotImplemented(self.typ, self.length - 4);
    } &size=self.length - 4;
};

type ParameterStatus = unit(length: uint32) {
    name: /[-_\/A-Za-z0-9]+/ &requires=(|$$| > 0);
    : uint8 &requires=($$ == 0);
    value: /[\x20-\x7e]+/ &requires=(|$$| > 0);
    : uint8 &requires=($$ == 0);
};

# Possible values are 'I' if idle (not in a transaction block);
# 'T' if in a transaction block; or 'E' if in a failed transaction block
# (queries will be rejected until block is ended).
type ReadyForQuery = unit(length: uint32) {
    var transaction_status: string;
    status: uint8 &requires=($$ == 'I' || $$ == 'T' || $$ == 'E') {
        self.transaction_status = ("%c" % $$);
    }
};

# Just for counting right now.
type DataRow = unit(length: uint32) {
    column_values: uint16;
    todo: skip bytes &size=length - 2;
};

# Fields with a 1 byte field as documented here:
# https://www.postgresql.org/docs/current/protocol-error-fields.html
# TODO: Parse it out nicely or leave that up to script-land?
type ErrorIdentifiedField = unit {
    code: uint8;
    value: bytes &until=b"\x00";
};

type ErrorResponse = unit(length: uint32) {
    : ErrorIdentifiedField[] &size=(length - 1);
    : b"\x00";
};

type AuthenticationRequest = unit(length: uint32) {
    identifier: uint32 &requires=($$ <= 12) {
        if (self.identifier == 0) {
            if (length != 4) {
                throw "AuthenticationOK with wrong length: %s" % length;
            }
        }
    }

    # There's more structure (GSS-API, SASL, cleartext), but for now
    # just thread through the raw data.
    data: bytes &eod;
};

type BackendKeyData = unit(length: uint32) {
    process_id: uint32;
    secret_key: uint32;
};

type NotImplemented = unit(typ: uint8, length: uint32) {
    chunk: bytes &size=length;
};
