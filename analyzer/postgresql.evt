import PostgreSQL;
import Zeek_PostgreSQL;

protocol analyzer PostgreSQL over TCP:
    parse originator with PostgreSQL::FrontendMessages,
    parse responder with PostgreSQL::BackendMessages,
    port 5432/tcp;

# Low level frontend/backend events.
on PostgreSQL::NotImplemented -> event PostgreSQL::not_implemented($conn, $is_orig, self.typ, self.chunk);
on PostgreSQL::BackendMessage -> event PostgreSQL::backend_message($conn, $is_orig);

# Frontend events

# Raised when the client sends a SSLRequest message.
on PostgreSQL::SSLRequest -> event PostgreSQL::ssl_request($conn, $is_orig);

# Reply from server about outcome of ssl. either "S" or "N" is expected
on PostgreSQL::MaybeBackendSSL::ssl_byte -> event PostgreSQL::ssl_reply($conn, $is_orig, self.ssl_byte);

on PostgreSQL::StartupParameter -> event PostgreSQL::startup_parameter($conn, self.name, self.value);

on PostgreSQL::StartupMessage -> event PostgreSQL::startup_message($conn, tuple(self.version.major, self.version.minor));

on PostgreSQL::Terminate -> event PostgreSQL::terminate($conn, $is_orig);

on PostgreSQL::SimpleQuery -> event PostgreSQL::simple_query($conn, $is_orig, self.query);

on PostgreSQL::ReadyForQuery -> event PostgreSQL::ready_for_query($conn, $is_orig, self.transaction_status);

# TODO: Parses row...
on PostgreSQL::DataRow -> event PostgreSQL::data_row($conn, $is_orig);

on PostgreSQL::ParameterStatus -> event PostgreSQL::parameter_status($conn, self.name, self.value);
